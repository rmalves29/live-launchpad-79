/**
 * Utilit√°rios para normaliza√ß√£o de n√∫meros de telefone
 * 
 * Armazenamento: DDD + n√∫mero (sem DDI 55)
 * Envio: DDI 55 + DDD + n√∫mero
 */

/**
 * Normaliza n√∫mero para armazenamento no banco (sem DDI, SEMPRE com 11 d√≠gitos).
 * Garante que o n√∫mero SEMPRE tenha o 9¬∫ d√≠gito para armazenamento consistente.
 * 
 * Entrada: 5531992904210 ou (31) 9290-4210 ou 3192904210
 * Sa√≠da: 31992904210 (sempre 11 d√≠gitos com 9¬∫ d√≠gito)
 */
export function normalizeForStorage(phone: string): string {
  if (!phone) return phone;
  
  // Remove todos os caracteres n√£o num√©ricos
  let clean = phone.replace(/\D/g, '');
  
  // Remove DDI 55 se presente
  if (clean.startsWith('55')) {
    clean = clean.substring(2);
  }
  
  // Se tem 10 d√≠gitos, adiciona o 9¬∫ d√≠gito
  if (clean.length === 10) {
    const ddd = clean.substring(0, 2);
    const number = clean.substring(2);
    clean = ddd + '9' + number;
    console.log('‚úÖ 9¬∫ d√≠gito ADICIONADO para armazenamento:', phone, '‚Üí', clean);
  }
  
  return clean;
}

/**
 * Adiciona DDI 55 para envio via WhatsApp e ajusta 9¬∫ d√≠gito baseado no DDD.
 * USADO APENAS NO MOMENTO DO ENVIO (server1.js).
 * 
 * Regra do 9¬∫ d√≠gito para envio:
 * - DDD ‚â§ 11 (Norte/Nordeste): Se tiver 10 d√≠gitos ‚Üí ADICIONA o 9¬∫ d√≠gito
 * - DDD ‚â• 31 (Sudeste/Sul/Centro-Oeste): Se tiver 11 d√≠gitos ‚Üí REMOVE o 9¬∫ d√≠gito
 * 
 * Exemplos:
 * - 1192904210 (DDD 11, 10 d√≠gitos) ‚Üí 5511992904210 (adiciona 9)
 * - 31992904210 (DDD 31, 11 d√≠gitos) ‚Üí 55319290421 (remove o 9¬∫ d√≠gito)
 * - 67999583003 (DDD 67, 11 d√≠gitos) ‚Üí 556799583003 (remove primeiro 9)
 */
export function normalizeForSending(phone: string): string {
  if (!phone) return phone;
  
  // Remove todos os caracteres n√£o num√©ricos
  let clean = phone.replace(/\D/g, '');
  
  // Remove DDI 55 se j√° presente
  if (clean.startsWith('55')) {
    clean = clean.substring(2);
  }
  
  // Valida√ß√£o b√°sica de tamanho
  if (clean.length < 10 || clean.length > 11) {
    console.warn('‚ö†Ô∏è Telefone com tamanho inv√°lido:', phone);
    return '55' + clean;
  }
  
  // Extrai o DDD
  const ddd = parseInt(clean.substring(0, 2));
  
  // Validar DDD
  if (ddd < 11 || ddd > 99) {
    console.warn('‚ö†Ô∏è DDD inv√°lido:', ddd);
    return '55' + clean;
  }
  
  // Aplica regra do 9¬∫ d√≠gito APENAS PARA ENVIO
  if (ddd <= 11) {
    // Norte/Nordeste: Se tem 10 d√≠gitos, ADICIONA o 9¬∫ d√≠gito
    if (clean.length === 10) {
      clean = clean.substring(0, 2) + '9' + clean.substring(2);
      console.log('üì§ 9¬∫ d√≠gito ADICIONADO para envio (DDD ‚â§ 11):', phone, '‚Üí', clean);
    }
  } else if (ddd >= 31) {
    // Sudeste/Sul/Centro-Oeste: Se tem 11 d√≠gitos e come√ßa com 9, REMOVE o 9¬∫ d√≠gito
    if (clean.length === 11 && clean[2] === '9') {
      clean = clean.substring(0, 2) + clean.substring(3);
      console.log('üì§ 9¬∫ d√≠gito REMOVIDO para envio (DDD ‚â• 31):', phone, '‚Üí', clean);
    }
  }
  
  // Adiciona DDI 55
  return '55' + clean;
}

/**
 * Formata n√∫mero de telefone para exibi√ß√£o
 * Exibe exatamente como est√° armazenado no banco
 * 
 * Entrada: 3192904210 ou 31992904210
 * Sa√≠da: (31) 9290-4210 ou (31) 99290-4210
 */
export function formatPhoneForDisplay(phone: string): string {
  if (!phone) return phone;
  
  const cleanPhone = phone.replace(/\D/g, '');
  
  // Remove DDI se presente para formata√ß√£o
  const phoneWithoutDDI = cleanPhone.startsWith('55') ? cleanPhone.substring(2) : cleanPhone;
  
  if (phoneWithoutDDI.length >= 10) {
    const ddd = phoneWithoutDDI.substring(0, 2);
    const number = phoneWithoutDDI.substring(2);
    
    if (number.length === 9) {
      // Celular: (31) 99999-9999
      return `(${ddd}) ${number.substring(0, 5)}-${number.substring(5)}`;
    } else if (number.length === 8) {
      // Fixo: (31) 9999-9999
      return `(${ddd}) ${number.substring(0, 4)}-${number.substring(4)}`;
    }
  }
  
  return phone;
}